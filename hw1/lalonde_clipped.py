#! /Library/Frameworks/Python.framework/Versions/3.9/bin/python3

"""
author = Genevieve LaLonde
CS510-Computers, Sound and Music
Spring term 2022
Portland State University 
Prof. Dr. Bart Massey
"""

"""
Sources:
I used this guide to determine the data format to use when writing frames:
https://www.tutorialspoint.com/read-and-write-wav-files-using-python-wave
It clued me in to needing the struct library:
https://docs.python.org/3/library/struct.html
I also used the wave library documentation: https://docs.python.org/3/library/wave.html
And examples from this pyaudio documentation: https://people.csail.mit.edu/hubert/pyaudio/
"""

import wave, pyaudio, struct
from math import pi, sin


def generate_soundfile():
    """
    1. Build a program in your chosen language that writes a sine wave to a WAV file named sine.wav 
    in the current directory. 
    Specifications for your sine wave:

        Channels per frame: 1 (mono)
        Sample size: 16 bits (values in the range -32767..32767)
        Amplitude: ¼ maximum possible 16-bit amplitude (values in the range -8192..8192)
        Duration: one second
        Frequency: 440Hz (440 cycles per second)
        Sample Rate: 48000 samples per second

    Generate the samples yourself using your language's sin() function — 
    """
    ww = wave.open("sine.wav", "wb")

    # Settings
    ww.setnchannels(1)
    # 2 bytes = 16 bits
    ww.setsampwidth(2)
    # 1 sec, 440 cycles per sec
    ww.setframerate(48000)
    # This appears to be just a convenience for use when reading. It is updated if it is wrong.
    ww.setnframes(48000)

    i=0
    for _ in range(48050):
        value = (int(8192*(sin(i))))
        data = struct.pack('<h', value)
        ww.writeframes(data)
        i += 2*pi/(48000/440)
    ww.close()

def generate_clipped():
    """
    Extend your program to also write a WAV file named clipped.wav in the current directory. 
    Generate a ½-amplitude sine wave (values in the range -16384..16384), 
    except: samples that would be greater than ¼ maximum amplitude (8192) 
    should instead be ¼ maximum amplitude (8192); 
    samples that would be less than ¼ minimum amplitude (-8192) 
    should instead be ¼ minimum amplitude (-8192).
    Other than these changes, all other parameters remain the same as in Part 1.
    """
    ww = wave.open("clipped.wav", "wb")

    # Settings
    ww.setnchannels(1)
    # 2 bytes = 16 bits
    ww.setsampwidth(2)
    # 1 sec, 440 cycles per sec
    ww.setframerate(48000)
    # This appears to be just a convenience for use when reading. It is updated if it is wrong.
    ww.setnframes(48000)

    i=0
    for _ in range(48050):
        value = (int(16384*(sin(i))))
        if value > 8192 | value < -8192:
            value = 8192
        data = struct.pack('<h', value)
        ww.writeframes(data)
        i += 2*pi/(48000/440)
    ww.close()


def play_soundfile(soundfile):
    """
    Extend your program to also play the clipped sine wave of part 2 on your computer's audio output. 
    Do not shell out to an external program for this: use an audio library. 
    Do not read-back a WAV file: samples should be generated by your program internally 
    and go directly to your audio output.
    """
    wr = wave.open(soundfile, 'rb')
    CHUNK = 1024
    frame_count = wr.getnframes()
    p = pyaudio.PyAudio()

    stream = p.open(format=p.get_format_from_width(wr.getsampwidth()),
                    channels=wr.getnchannels(),
                    rate=wr.getframerate(),
                    output=True)

    data = wr.readframes(CHUNK)
    for i in range(frame_count):
    #while data != '':
        stream.write(data)
        data = wr.readframes(CHUNK)

    stream.stop_stream()
    stream.close()
    p.terminate()
    wr.close()


if __name__ == "__main__":
    generate_soundfile()
    # first play the quieter one
    play_soundfile("sine.wav")
    generate_clipped()
    # next play the louder one
    play_soundfile("clipped.wav")

