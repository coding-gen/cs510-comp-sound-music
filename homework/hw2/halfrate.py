#! /Library/Frameworks/Python.framework/Versions/3.9/bin/python3

"""
author = Genevieve LaLonde
CS510-Computers, Sound and Music
Spring term 2022
Portland State University 
Prof. Dr. Bart Massey
Homework2: Resampling
20 April 2022

Inputs a single-channel WAV file at any sample rate s.
Outputs a WAV file containing the same signal at a sample rate s/2.
"""

"""
Sources:
I used this guide to determine the data format to use when reading and writing frames:
https://www.tutorialspoint.com/read-and-write-wav-files-using-python-wave
It clued me in to needing the struct library:
https://docs.python.org/3/library/struct.html
I also used the wave library documentation: https://docs.python.org/3/library/wave.html
And examples from this pyaudio documentation: https://people.csail.mit.edu/hubert/pyaudio/
"""

import wave, pyaudio, struct
import sys
from math import pi, sin


def filter(coefficientsFile, sampleFile):
    # Filter out the high frequencies

    # For each sample,
    # Given filter coefficients N
    # Sum from 0 to N-1
    # of the jth filter coefficient
    # * the jth input sample, offset by i
    # The output array would be smaller by N on both ends.
    # Instead, pad it with 0s on start and end

    a = open(coefficientsFile, "r")
    coefficients = [float(line) for line in a]

    obj = wave.open(inputfile,'rb')
    frameCount = obj.getnframes()
    x = obj.readframes(frameCount) 

    result = []
    for i in range(frameCount):
        filterSum = 0
        for j in range(len(coefficients)):
            # Pad the start
            if (i - j < 0) | (i - j >= frameCount):
                filterSignal = 0
            else: 
                filterSignal = x[i - j]
            filterSum += coefficients[j] * filterSignal
        result.append(filterSum)

    a.close()
    obj.close()

    return result


def decimate(signal, inputfile):

    outfile = "r" + inputfile.split('/')[len(inputfile.split('/')) - 1]

    obj = wave.open(inputfile,'rb')
    ww = wave.open(outfile, "wb")

    # Settings
    ww.setnchannels(1)
    # 2 bytes = 16 bits
    ww.setsampwidth(obj.getsampwidth())
    # 1 sec, 440 cycles per sec
    ww.setframerate(obj.getframerate() // 2)
    # At half the framerate, we'll have half the frames
    # Added padding in the filter to maintain frame count.
    ww.setnframes(obj.getnframes() // 2)

    for i in range(len(signal)):
        if i % 2 == 0:
            data = struct.pack('<h', int(signal[i]))
            ww.writeframes(data)
    ww.close()



def play_soundfile(soundfile):
    """
    Extend your program to also play the clipped sine wave of part 2 on your computer's audio output. 
    Do not shell out to an external program for this: use an audio library. 
    Do not read-back a WAV file: samples should be generated by your program internally 
    and go directly to your audio output.
    """
    wr = wave.open(soundfile, 'rb')
    CHUNK = 1024
    frame_count = wr.getnframes()
    p = pyaudio.PyAudio()

    stream = p.open(format=p.get_format_from_width(wr.getsampwidth()),
                    channels=wr.getnchannels(),
                    rate=wr.getframerate(),
                    output=True)

    data = wr.readframes(CHUNK)
    for i in range(frame_count):
    #while data != '':
        stream.write(data)
        data = wr.readframes(CHUNK)

    stream.stop_stream()
    stream.close()
    p.terminate()
    wr.close()


if __name__ == "__main__":

    assert sys.argv[1], "Input file required."
    inputfile = sys.argv[1]

    result = filter('hw-resample/coeffs.txt', inputfile)
    decimate(result, inputfile)


